version: "3.2"

services:
  server:
    # Tell docker what file to build the server from
    build:
      context: ./server
      args:
        USER_ID: 1000
        GROUP_ID: 1000
      dockerfile: Dockerfile-dev
    image: backend:imtegra
    # Port mapping
    ports:
      - 4000:4000
    # The ports to expose
    expose:
      - 4000
    stdin_open: true
    tty: true
    # Environment variables
    environment:
      - MONGO_URI=mongodb://db:27017/db
      - PORT=4000
      - JWT_SECRET=secretsecret
      - JWT_EXPIRY=30d
      - DEBUG=worker:*
      - MORGAN=combined
      - NODE_ENV=development
    # Volumes to mount
    volumes:
      - ./server/src:/app/server/src
    # Run command
    # Nodemon for hot reloading (-L flag required for polling in Docker)
    command: nodemon -L src/server.js
    # Connect to other containers
    links:
      - db
    # Restart action
    restart: always
  ##########################
  ### SETUP CLIENT CONTAINER
  ##########################
  client:
    build:
      context: ./client
      args:
        USER_ID: 1000
        GROUP_ID: 1000
      dockerfile: Dockerfile-dev
    image: client:imtegra
    environment:
      - REACT_APP_PORT=3000
      - CHOKIDAR_USEPOLLING=true
    expose:
      - 3000
    ports:
      - 3000:3000
    stdin_open: true
    tty: true
    volumes:
      - ./client/src/:/app/client/src
    depends_on:
      - server
    command: npm run start
    restart: always
  ##########################
  ### SETUP DB CONTAINER
  ##########################
  db:
    image: mongo
    expose:
      - 27017
    ports:
      - 27017:27017
    restart: always
    volumes:
      # Map physical volume to virtual for data persistence
      # On server could be /data/db
      # For this case we will create a Docker volume and use it instead
      # You need to run docker volume create yourproject-dbdata
      - imtegra-dbdata:/data/db
# Add this to include data volume for mongo
# Confirm this is working later
volumes:
  ? imtegra-dbdata
